<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--
     For more details about configurations options that may appear in
     this file, see http://wiki.apache.org/solr/SolrConfigXml.
-->
<config>
  <!-- In all configuration below, a prefix of "solr." for class names
       is an alias that causes solr to search appropriate packages,
       including org.apache.solr.(search|update|request|core|analysis)

       You may also specify a fully qualified Java classname if you
       have your own custom plugins.
    -->

  <!-- Controls what version of Lucene various components of Solr
       adhere to.  Generally, you want to use the latest version to
       get all bug fixes and improvements. It is highly recommended
       that you fully re-index after changing this setting as it can
       affect both how text is indexed and queried.
  -->
  <luceneMatchVersion>4.10.4</luceneMatchVersion>

  <!-- <lib/> directives can be used to instruct Solr to load an Jars
       identified and use them to resolve any "plugins" specified in
       your solrconfig.xml or schema.xml (ie: Analyzers, Request
       Handlers, etc...).

       All directories and paths are resolved relative to the
       instanceDir.

       Please note that <lib/> directives are processed in the order
       that they appear in your solrconfig.xml file, and are "stacked"
       on top of each other when building a ClassLoader - so if you have
       plugin jars with dependencies on other jars, the "lower level"
       dependency jars should be loaded first.

       If a "./lib" directory exists in your instanceDir, all files
       found in it are included as if you had used the following
       syntax...

              <lib dir="./lib" />
    -->

  <!-- Data Directory

       Used to specify an alternate directory to hold all index data
       other than the default ./data under the Solr home.  If
       replication is in use, this should match the replication
       configuration.
    -->
  <dataDir>${solr.data.dir:}</dataDir>


  <!-- The DirectoryFactory to use for indexes.

       solr.StandardDirectoryFactory is filesystem
       based and tries to pick the best implementation for the current
       JVM and platform.  solr.NRTCachingDirectoryFactory, the default,
       wraps solr.StandardDirectoryFactory and caches small files in memory
       for better NRT performance.

       One can force a particular implementation via solr.MMapDirectoryFactory,
       solr.NIOFSDirectoryFactory, or solr.SimpleFSDirectoryFactory.

       solr.RAMDirectoryFactory is memory based, not
       persistent, and doesn't work with replication.
    -->
  <directoryFactory name="DirectoryFactory"
                    class="${solr.directoryFactory:solr.NRTCachingDirectoryFactory}"/>

  <!-- The CodecFactory for defining the format of the inverted index.
       The default implementation is SchemaCodecFactory, which is the official Lucene
       index format, but hooks into the schema to provide per-field customization of
       the postings lists and per-document values in the fieldType element
       (postingsFormat/docValuesFormat). Note that most of the alternative implementations
       are experimental, so if you choose to customize the index format, its a good
       idea to convert back to the official format e.g. via IndexWriter.addIndexes(IndexReader)
       before upgrading to a newer version to avoid unnecessary reindexing.
  -->
  <codecFactory class="solr.SchemaCodecFactory"/>

  <!-- To enable dynamic schema REST APIs, use the following for <schemaFactory>:

       <schemaFactory class="ManagedIndexSchemaFactory">
         <bool name="mutable">true</bool>
         <str name="managedSchemaResourceName">managed-schema</str>
       </schemaFactory>

       When ManagedIndexSchemaFactory is specified, Solr will load the schema from
       he resource named in 'managedSchemaResourceName', rather than from schema.xml.
       Note that the managed schema resource CANNOT be named schema.xml.  If the managed
       schema does not exist, Solr will create it after reading schema.xml, then rename
       'schema.xml' to 'schema.xml.bak'.

       Do NOT hand edit the managed schema - external modifications will be ignored and
       overwritten as a result of schema modification REST API calls.

       When ManagedIndexSchemaFactory is specified with mutable = true, schema
       modification REST API calls will be allowed; otherwise, error responses will be
       sent back for these requests.
  -->
  <schemaFactory class="ClassicIndexSchemaFactory"/>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       Index Config - These settings control low-level behavior of indexing
       Most example settings here show the default value, but are commented
       out, to more easily see where customizations have been made.

       Note: This replaces <indexDefaults> and <mainIndex> from older versions
       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <indexConfig>
    <lockType>${solr.lock.type:native}</lockType>

    <!--
        Use true to enable this safety check, which can help
        reduce the risk of propagating index corruption from older segments
        into new ones, at the expense of slower merging.
    -->
    <checkIntegrityAtMerge>false</checkIntegrityAtMerge>
  </indexConfig>

  <!-- The default high-performance update handler -->
  <updateHandler class="solr.DirectUpdateHandler2">

    <!-- AutoCommit

         Perform a hard commit automatically under certain conditions.
         Instead of enabling autoCommit, consider using "commitWithin"
         when adding documents.

         http://wiki.apache.org/solr/UpdateXmlMessages

         maxDocs - Maximum number of documents to add since the last
                   commit before automatically triggering a new commit.

         maxTime - Maximum amount of time in ms that is allowed to pass
                   since a document was added before automatically
                   triggering a new commit.
         openSearcher - if false, the commit causes recent index changes
           to be flushed to stable storage, but does not cause a new
           searcher to be opened to make those changes visible.
      -->
     <autoCommit>
       <maxTime>${solr.autoCommit.maxTime:15000}</maxTime>
       <openSearcher>false</openSearcher>
     </autoCommit>

    <!-- softAutoCommit is like autoCommit except it causes a
         'soft' commit which only ensures that changes are visible
         but does not ensure that data is synced to disk.  This is
         faster and more near-realtime friendly than a hard commit.
      -->

    <autoSoftCommit>
      <maxTime>${solr.autoSoftCommit.maxTime:-1}</maxTime>
    </autoSoftCommit>
  </updateHandler>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       Query section - these settings control query time things like caches
       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <query>
    <maxBooleanClauses>1024</maxBooleanClauses>

    <filterCache class="solr.FastLRUCache"
                 size="512"
                 initialSize="512"
                 autowarmCount="0"/>
    <queryResultCache class="solr.LRUCache"
                     size="512"
                     initialSize="512"
                     autowarmCount="0"/>
    <documentCache class="solr.LRUCache"
                   size="512"
                   initialSize="512"
                   autowarmCount="0"/>
    <enableLazyFieldLoading>true</enableLazyFieldLoading>

    <queryResultWindowSize>20</queryResultWindowSize>
    <queryResultMaxDocsCached>200</queryResultMaxDocsCached>

    <useColdSearcher>false</useColdSearcher>
    <maxWarmingSearchers>2</maxWarmingSearchers>

  </query>


  <!-- Request Dispatcher

       This section contains instructions for how the SolrDispatchFilter
       should behave when processing requests for this SolrCore.

    -->
  <requestDispatcher handleSelect="false" >
    <!-- Request Parsing

         These settings indicate how Solr Requests may be parsed, and
         what restrictions may be placed on the ContentStreams from
         those requests

         enableRemoteStreaming - enables use of the stream.file
         and stream.url parameters for specifying remote streams.

         multipartUploadLimitInKB - specifies the max size (in KiB) of
         Multipart File Uploads that Solr will allow in a Request.

         formdataUploadLimitInKB - specifies the max size (in KiB) of
         form data (application/x-www-form-urlencoded) sent via
         POST. You can use POST to pass request parameters not
         fitting into the URL.

         addHttpRequestToContext - if set to true, it will instruct
         the requestParsers to include the original HttpServletRequest
         object in the context map of the SolrQueryRequest under the
         key "httpRequest". It will not be used by any of the existing
         Solr components, but may be useful when developing custom
         plugins.

      -->
    <requestParsers enableRemoteStreaming="false"
                    multipartUploadLimitInKB="2048000"
                    formdataUploadLimitInKB="2048"
                    addHttpRequestToContext="false"/>

    <!-- HTTP Caching

         Set HTTP caching related parameters (for proxy caches and clients).

         The options below instruct Solr not to output any HTTP Caching
         related headers
    -->
    <httpCaching never304="true" />
  </requestDispatcher>

  <!-- Request Handlers

       http://wiki.apache.org/solr/SolrRequestHandler

       Incoming queries will be dispatched to a specific handler by name
       based on the path specified in the request.

       If a Request Handler is declared with startup="lazy", then it will
       not be initialized until the first request that uses it.

    -->
  <!-- SearchHandler

       http://wiki.apache.org/solr/SearchHandler

       For processing Search Queries, the primary Request Handler
       provided with Solr is "SearchHandler" It delegates to a sequent
       of SearchComponents (see below) and supports distributed
       queries across multiple shards
    -->
  <searchComponent name="tvComponent" class="solr.TermVectorComponent"/>

  <requestHandler name="/search" class="solr.SearchHandler">
    <lst name="defaults">
      <str name="echoParams">explicit</str>
      <!-- We return all of the original fields, not the _search versions -->
      <!-- NOTE: This parameter should match the value of DEFAULT_FIELDS in
           lib/solr/connection.rb -->
      <str name="fl">uid,doi,license,license_url,data_source,authors,title,journal,year,volume,number,pages,fulltext_url</str>
      <str name="defType">edismax</str>
      <str name="f.au.qf">authors</str>
      <str name="f.author.qf">authors</str>
      <str name="f.title.qf">title_stem</str>
      <str name="f.fulltext.qf">fulltext_stem</str>
      <str name="f.journal.qf">journal_stem</str>
      <str name="qf">
        title_stem^8.0 fulltext_stem^5.0 journal_stem
      </str>
      <str name="pf">
        title_stem^8.0 fulltext_stem^5.0 journal_stem
      </str>
      <str name="q.alt">*:*</str>

      <!-- Enable faceting for authors and journals -->
      <bool name="facet">true</bool>
      <int name="facet.limit">10</int>
      <str name="facet.field">authors_facet</str>
      <str name="facet.field">journal_facet</str>

      <str name="facet.query">year:[* TO 1799]</str>
      <str name="facet.query">year:[1800 TO 1809]</str>
      <str name="facet.query">year:[1810 TO 1819]</str>
      <str name="facet.query">year:[1820 TO 1829]</str>
      <str name="facet.query">year:[1830 TO 1839]</str>
      <str name="facet.query">year:[1840 TO 1849]</str>
      <str name="facet.query">year:[1850 TO 1859]</str>
      <str name="facet.query">year:[1860 TO 1869]</str>
      <str name="facet.query">year:[1870 TO 1879]</str>
      <str name="facet.query">year:[1880 TO 1889]</str>
      <str name="facet.query">year:[1890 TO 1899]</str>
      <str name="facet.query">year:[1900 TO 1909]</str>
      <str name="facet.query">year:[1910 TO 1919]</str>
      <str name="facet.query">year:[1920 TO 1929]</str>
      <str name="facet.query">year:[1930 TO 1939]</str>
      <str name="facet.query">year:[1940 TO 1949]</str>
      <str name="facet.query">year:[1950 TO 1959]</str>
      <str name="facet.query">year:[1960 TO 1969]</str>
      <str name="facet.query">year:[1970 TO 1979]</str>
      <str name="facet.query">year:[1980 TO 1989]</str>
      <str name="facet.query">year:[1990 TO 1999]</str>
      <str name="facet.query">year:[2000 TO 2009]</str>
      <str name="facet.query">year:[2010 TO *]</str>
    </lst>
  </requestHandler>

  <requestHandler name="/termvectors" class="solr.SearchHandler">
    <lst name="defaults">
      <str name="echoParams">explicit</str>
      <!-- We return all of the original fields, not the _search versions -->
      <!-- NOTE: This parameter should match the value of DEFAULT_FIELDS in
           lib/solr/connection.rb -->
      <str name="fl">uid,doi,license,license_url,data_source,authors,title,journal,year,volume,number,pages,fulltext_url</str>
      <str name="defType">edismax</str>
      <str name="f.au.qf">authors</str>
      <str name="f.author.qf">authors</str>
      <str name="f.title.qf">title_stem</str>
      <str name="f.fulltext.qf">fulltext_stem</str>
      <str name="f.journal.qf">journal_stem</str>
      <str name="qf">
        title_stem^8.0 fulltext_stem^5.0 journal_stem
      </str>
      <str name="pf">
        title_stem^8.0 fulltext_stem^5.0 journal_stem
      </str>
      <str name="q.alt">*:*</str>

      <!-- Enable faceting for authors and journals -->
      <bool name="facet">true</bool>
      <int name="facet.limit">10</int>
      <str name="facet.field">authors_facet</str>
      <str name="facet.field">journal_facet</str>

      <str name="facet.query">year:[* TO 1799]</str>
      <str name="facet.query">year:[1800 TO 1809]</str>
      <str name="facet.query">year:[1810 TO 1819]</str>
      <str name="facet.query">year:[1820 TO 1829]</str>
      <str name="facet.query">year:[1830 TO 1839]</str>
      <str name="facet.query">year:[1840 TO 1849]</str>
      <str name="facet.query">year:[1850 TO 1859]</str>
      <str name="facet.query">year:[1860 TO 1869]</str>
      <str name="facet.query">year:[1870 TO 1879]</str>
      <str name="facet.query">year:[1880 TO 1889]</str>
      <str name="facet.query">year:[1890 TO 1899]</str>
      <str name="facet.query">year:[1900 TO 1909]</str>
      <str name="facet.query">year:[1910 TO 1919]</str>
      <str name="facet.query">year:[1920 TO 1929]</str>
      <str name="facet.query">year:[1930 TO 1939]</str>
      <str name="facet.query">year:[1940 TO 1949]</str>
      <str name="facet.query">year:[1950 TO 1959]</str>
      <str name="facet.query">year:[1960 TO 1969]</str>
      <str name="facet.query">year:[1970 TO 1979]</str>
      <str name="facet.query">year:[1980 TO 1989]</str>
      <str name="facet.query">year:[1990 TO 1999]</str>
      <str name="facet.query">year:[2000 TO 2009]</str>
      <str name="facet.query">year:[2010 TO *]</str>

      <!-- Enable term vectors, against the full text -->
      <bool name="tv">true</bool>
      <str name="tv.fl">fulltext,fulltext_ns</str>
      <bool name="tv.tf">true</bool>
      <bool name="tv.df">true</bool>
      <bool name="tv.tf_idf">false</bool>
      <bool name="tv.positions">true</bool>
      <bool name="tv.offsets">false</bool>
    </lst>
    <arr name="last-components">
      <str>tvComponent</str>
    </arr>
  </requestHandler>

  <requestHandler name="/update" class="solr.UpdateRequestHandler"/>
  <requestHandler name="/admin/" class="solr.admin.AdminHandlers" />

  <!-- ping/healthcheck -->
  <requestHandler name="/admin/ping" class="solr.PingRequestHandler">
    <lst name="invariants">
      <str name="q">solrpingquery</str>
    </lst>
    <lst name="defaults">
      <str name="echoParams">all</str>
    </lst>
    <!-- An optional feature of the PingRequestHandler is to configure the
         handler with a "healthcheckFile" which can be used to enable/disable
         the PingRequestHandler.
         relative paths are resolved against the data dir
      -->
    <!-- <str name="healthcheckFile">server-enabled.txt</str> -->
  </requestHandler>


  <!-- Legacy config for the admin interface -->
  <admin>
    <defaultQuery>*:*</defaultQuery>
  </admin>

</config>
